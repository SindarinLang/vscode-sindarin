<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>name</key>
    <string>Sindarin</string>
    <key>scopeName</key>
    <string>source.sindarin</string>
    <key>fileTypes</key>
    <array>
      <string>.si</string>
    </array>
    <key>patterns</key>
    <array>
      <dict>
        <key>include</key>
        <string>#statements</string>
      </dict>
    </array>
    <key>repository</key>
    <dict>
      <key>statements</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#import</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#export</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#raw-identifier-call</string>
          </dict>
        </array>
      </dict>
      <key>comment</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#single-line-comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#multi-line-comment</string>
          </dict>
        </array>
      </dict>
      <key>single-line-comment</key>
      <dict>
        <key>name</key>
        <string>comment.line.double-slash</string>
        <key>match</key>
        <string>(//).*$\n?</string>
      </dict>
      <key>multi-line-comment</key>
      <dict>
        <key>name</key>
        <string>comment.block</string>
        <key>begin</key>
        <string>(\/\*)</string>
        <key>end</key>
        <string>(\*\/)</string>
      </dict>
      <key>import</key>
      <dict>
        <key>name</key>
        <string>meta.import</string>
        <key>begin</key>
        <string>((from)\s(\")(.*)(\")\s)?(import)(?=\s(\{|[$[:lower:]]))</string>
        <key>beginCaptures</key>
        <dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>keyword.other.from</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>string.quoted</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>string.quoted.double</string>
          </dict>
          <key>5</key>
          <dict>
            <key>name</key>
            <string>string.quoted</string>
          </dict>
          <key>6</key>
          <dict>
            <key>name</key>
            <string>keyword.other.import</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#module</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#modules</string>
          </dict>
        </array>
        <key>end</key>
        <string>(\;)</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.semi</string>
          </dict>
        </dict>
      </dict>
      <key>export</key>
      <dict>
        <key>begin</key>
        <string>(export)(?=\s(\{|[$[:lower:]]))</string>
        <key>name</key>
        <string>meta.export</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.other.export</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#module</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#modules</string>
          </dict>
        </array>
        <key>end</key>
        <string>(\;)</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.semi</string>
          </dict>
        </dict>
      </dict>
      <key>module</key>
      <dict>
        <key>name</key>
        <string>meta.module</string>
        <key>begin</key>
        <string>\s([$[:lower:]][$[:alnum:]]*)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>constant.other.identifier</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#accessor</string>
          </dict>
        </array>
        <key>end</key>
        <string>(?=(\,\s\{)|\;)</string>
      </dict>
      <key>modules</key>
      <dict>
        <key>name</key>
        <string>meta.modules</string>
        <key>begin</key>
        <string>\s(\{)(?=\s)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.open_brace</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#module-identifier</string>
          </dict>
        </array>
        <key>end</key>
        <string>(\})(?=\;)</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.close_brace</string>
          </dict>
        </dict>
      </dict>
      <key>module-identifier</key>
      <dict>
        <key>name</key>
        <string>meta.identifier</string>
        <key>begin</key>
        <string>\s([$[:lower:]][$[:alnum:]]*)(?=\.|\,|\n|(\s\}\;))</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>constant.other.identifier</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#accessor</string>
          </dict>
        </array>
        <key>end</key>
        <string>(?=(\,)|\n|(\s\}\;))</string>
      </dict>
      <key>accessor</key>
      <dict>
        <key>name</key>
        <string>meta.accessor</string>
        <key>begin</key>
        <string>(\.)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.accessor</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#accessor-identifier</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#accessor-wildcard</string>
          </dict>
        </array>
        <key>end</key>
        <string>(?=\,|\;|\n|(\s\}\;))</string>
      </dict>
      <key>accessor-identifier</key>
      <dict>
        <key>name</key>
        <string>constant.other.identifier</string>
        <key>match</key>
        <string>([$[:lower:]][$[:alnum:]]*|[0-9]+)(?=\.|\,|\;|\n|(\s\}\;))</string>
      </dict>
      <key>accessor-wildcard</key>
      <dict>
        <key>name</key>
        <string>keyword.operator.wildcard</string>
        <key>match</key>
        <string>(\*)(?=\,|\;|\n|(\s\}\;))</string>
      </dict>
      <key>declaration</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#type-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#value-declaration</string>
          </dict>
        </array>
      </dict>
      <key>type-declaration</key>
      <dict>
        <key>name</key>
        <string>meta.declaration.type</string>
        <key>begin</key>
        <string>([$[:upper:]][$[:alnum:]]*)(\:)\s</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>entity.name.type</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.separator.colon</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(\;)</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.semi</string>
          </dict>
        </dict>
      </dict>
      <key>value-declaration</key>
      <dict>
        <key>name</key>
        <string>meta.value-declaration</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#constant-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#mutable-declaration</string>
          </dict>
        </array>
      </dict>
      <key>constant-declaration</key>
      <dict>
        <key>name</key>
        <string>meta.declaration.constant</string>
        <key>begin</key>
        <string>([$[:lower:]][$[:alnum:]]*)(\:\s)?([$[:upper:]][$[:alnum:]]*)?\s(\=)\s</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>constant.other.identifier</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.separator.colon</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>entity.name.type</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.assignment.constant</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
        <key>end</key>
        <string>(\;)</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.semi</string>
          </dict>
        </dict>
      </dict>
      <key>mutable-declaration</key>
      <dict>
        <key>name</key>
        <string>meta.declaration.mutable</string>
        <key>begin</key>
        <string>([$[:lower:]][$[:alnum:]]*)(\:\s)?([$[:upper:]][$[:alnum:]]*)?\s(\~)\s</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>constant.other.identifier</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.separator.colon</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>entity.name.type</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.assignment.mutable</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
        <key>end</key>
        <string>(\;)</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.semi</string>
          </dict>
        </dict>
      </dict>
      <key>raw-identifier-call</key>
      <dict>
        <key>name</key>
        <string>meta.identifier.call</string>
        <key>begin</key>
        <string>([$[:lower:]][$[:alnum:]|\.]*)(\()</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>entity.name.function</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.open_round</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#arguments</string>
          </dict>
        </array>
        <key>end</key>
        <string>(\))(\;)</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.close_round</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.semi</string>
          </dict>
        </dict>
      </dict>
      <key>expression</key>
      <dict>
        <key>name</key>
        <string>meta.expression</string>
        <key>begin</key>
        <string>(?=[^\,\;\]\}\)])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#identifier-call</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#block</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#array</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#tuple</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#string</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#constant</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#identifier</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#number</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#operator</string>
          </dict>
        </array>
        <key>end</key>
        <string>(\,)|(\s)|(?=(\;|\]|\}|\)))</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.comma</string>
          </dict>
        </dict>
      </dict>
      <key>identifier-call</key>
      <dict>
        <key>name</key>
        <string>meta.identifier.call</string>
        <key>begin</key>
        <string>([$[:lower:]][$[:alnum:]|\.]*)(\()</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>entity.name.function</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.open_round</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#arguments</string>
          </dict>
        </array>
        <key>end</key>
        <string>(\))</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.close_round</string>
          </dict>
        </dict>
      </dict>
      <key>identifier</key>
      <dict>
        <key>name</key>
        <string>constant.other.identifier</string>
        <key>match</key>
        <string>([$[:lower:]][$[:alnum:]]*)</string>
      </dict>
      <key>parameters</key>
      <dict>
        <key>name</key>
        <string>meta.function-parameters</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#listed-value-declaration</string>
          </dict>
        </array>
      </dict>
      <key>arguments</key>
      <dict>
        <key>name</key>
        <string>meta.function-arguments</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>function-body-statement</key>
      <dict>
        <key>name</key>
        <string>meta.function-body-statement</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#raw-identifier-call</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#function-return</string>
          </dict>
        </array>
      </dict>
      <key>function-return</key>
      <dict>
        <key>name</key>
        <string>meta.return-statement</string>
        <key>begin</key>
        <string>(return)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.other.return</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
        <key>end</key>
        <string>(\;)</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.semi</string>
          </dict>
        </dict>
      </dict>
      <key>array</key>
      <dict>
        <key>name</key>
        <string>meta.array</string>
        <key>begin</key>
        <string>(\[)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.open_square</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
        <key>end</key>
        <string>(\])</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.close_square</string>
          </dict>
        </dict>
      </dict>
      <key>block</key>
      <dict>
        <key>name</key>
        <string>meta.block</string>
        <key>begin</key>
        <string>(\{)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.open_curly</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#function-body-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#listed-value-declaration</string>
          </dict>
        </array>
        <key>end</key>
        <string>(\})</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.close_curly</string>
          </dict>
        </dict>
      </dict>
      <key>listed-value-declaration</key>
      <dict>
        <key>name</key>
        <string>meta.value-declaration</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#listed-constant-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#listed-mutable-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#listed-undefined-declaration</string>
          </dict>
        </array>
      </dict>
      <key>listed-constant-declaration</key>
      <dict>
        <key>name</key>
        <string>meta.declaration.constant</string>
        <key>begin</key>
        <string>([$[:lower:]][$[:alnum:]]*)(\:\s)?([$[:upper:]][$[:alnum:]]*)?\s(\=)\s</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>constant.other.identifier</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.separator.colon</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>entity.name.type</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.assignment.constant</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
        <key>end</key>
        <string>(\,)|(?=\}|\))</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.comma</string>
          </dict>
        </dict>
      </dict>
      <key>listed-mutable-declaration</key>
      <dict>
        <key>name</key>
        <string>meta.declaration.mutable</string>
        <key>begin</key>
        <string>([$[:lower:]][$[:alnum:]]*)(\:\s)?([$[:upper:]][$[:alnum:]]*)?\s(\~)\s</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>constant.other.identifier</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.separator.colon</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>entity.name.type</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.assignment.mutable</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
        <key>end</key>
        <string>(\,)|(?=\}|\))</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.comma</string>
          </dict>
        </dict>
      </dict>
      <key>listed-undefined-declaration</key>
      <dict>
        <key>name</key>
        <string>meta.declaration.undefined</string>
        <key>begin</key>
        <string>([$[:lower:]][$[:alnum:]]*)(\:\s)?([$[:upper:]][$[:alnum:]]*)?(?=\,|\))</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>constant.other.identifier</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.separator.colon</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>entity.name.type</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(\,)|(?=\}|\))</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.comma</string>
          </dict>
        </dict>
      </dict>
      <key>tuple</key>
      <dict>
        <key>name</key>
        <string>meta.tuple</string>
        <key>begin</key>
        <string>(\()</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.open_round</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#parameters</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
        <key>end</key>
        <string>(\))</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.close_round</string>
          </dict>
        </dict>
      </dict>
      <key>operator</key>
      <dict>
        <key>name</key>
        <string>meta.operator</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#destructor</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#equals</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#not-equals</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#less-than-equals</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#greater-than-equals</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#logical-and</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#logical-or</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#default</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#arrow</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#forward</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#backward</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#logical-not</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#add</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#subtract</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#multiply</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#divide</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#modulus</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#exponent</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#conditional</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#less-than</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#greater-than</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#bitwise-and</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#bitwise-or</string>
          </dict>
        </array>
      </dict>
      <key>destructor</key>
      <dict>
        <key>match</key>
        <string>(\.\.\.)</string>
        <key>name</key>
        <string>keyword.operator.destruct</string>
      </dict>
      <key>equals</key>
      <dict>
        <key>match</key>
        <string>(\=\=)</string>
        <key>name</key>
        <string>keyword.operator.comparison.equals</string>
      </dict>
      <key>not-equals</key>
      <dict>
        <key>match</key>
        <string>(\!\=)</string>
        <key>name</key>
        <string>keyword.operator.comparison.not_equals</string>
      </dict>
      <key>less-than-equals</key>
      <dict>
        <key>match</key>
        <string>(\&lt;\=)</string>
        <key>name</key>
        <string>keyword.operator.comparison.less_than_equals</string>
      </dict>
      <key>greater-than-equals</key>
      <dict>
        <key>match</key>
        <string>(\&gt;\=)</string>
        <key>name</key>
        <string>keyword.operator.comparison.greater_than_equals</string>
      </dict>
      <key>logical-and</key>
      <dict>
        <key>match</key>
        <string>(\&amp;\&amp;)</string>
        <key>name</key>
        <string>keyword.operator.logical.and</string>
      </dict>
      <key>logical-or</key>
      <dict>
        <key>match</key>
        <string>(\|\|)</string>
        <key>name</key>
        <string>keyword.operator.logical.or</string>
      </dict>
      <key>default</key>
      <dict>
        <key>match</key>
        <string>(\?\?)</string>
        <key>name</key>
        <string>keyword.operator.default</string>
      </dict>
      <key>arrow</key>
      <dict>
        <key>match</key>
        <string>(\=\&gt;)</string>
        <key>name</key>
        <string>keyword.operator.arrow</string>
      </dict>
      <key>forward</key>
      <dict>
        <key>match</key>
        <string>(\-\&gt;)</string>
        <key>name</key>
        <string>keyword.operator.forward</string>
      </dict>
      <key>backward</key>
      <dict>
        <key>match</key>
        <string>(\&lt;\-)</string>
        <key>name</key>
        <string>keyword.operator.backward</string>
      </dict>
      <key>logical-not</key>
      <dict>
        <key>match</key>
        <string>(\!)</string>
        <key>name</key>
        <string>keyword.operator.logical.not</string>
      </dict>
      <key>add</key>
      <dict>
        <key>match</key>
        <string>(\+)</string>
        <key>name</key>
        <string>keyword.operator.arithmetic.add</string>
      </dict>
      <key>subtract</key>
      <dict>
        <key>match</key>
        <string>(\-)</string>
        <key>name</key>
        <string>keyword.operator.arithmetic.subtract</string>
      </dict>
      <key>multiply</key>
      <dict>
        <key>match</key>
        <string>(\*)</string>
        <key>name</key>
        <string>keyword.operator.arithmetic.multiply</string>
      </dict>
      <key>divide</key>
      <dict>
        <key>match</key>
        <string>(\/)</string>
        <key>name</key>
        <string>keyword.operator.arithmetic.divide</string>
      </dict>
      <key>modulus</key>
      <dict>
        <key>match</key>
        <string>(\%)</string>
        <key>name</key>
        <string>keyword.operator.arithmetic.modulus</string>
      </dict>
      <key>exponent</key>
      <dict>
        <key>match</key>
        <string>(\^)</string>
        <key>name</key>
        <string>keyword.operator.arithmetic.exponent</string>
      </dict>
      <key>conditional</key>
      <dict>
        <key>match</key>
        <string>(\?)</string>
        <key>name</key>
        <string>keyword.operator.conditional</string>
      </dict>
      <key>less-than</key>
      <dict>
        <key>match</key>
        <string>(\&lt;)</string>
        <key>name</key>
        <string>keyword.operator.comparison.less_than</string>
      </dict>
      <key>greater-than</key>
      <dict>
        <key>match</key>
        <string>(\&gt;)</string>
        <key>name</key>
        <string>keyword.operator.comparison.greater_than</string>
      </dict>
      <key>bitwise-and</key>
      <dict>
        <key>match</key>
        <string>(\&amp;)</string>
        <key>name</key>
        <string>keyword.operator.bitwise.and</string>
      </dict>
      <key>bitwise-or</key>
      <dict>
        <key>match</key>
        <string>(\|)</string>
        <key>name</key>
        <string>keyword.operator.bitwise.or</string>
      </dict>
      <key>string</key>
      <dict>
        <key>name</key>
        <string>string.quoted</string>
        <key>begin</key>
        <string>(\")</string>
        <key>contentName</key>
        <string>string.quoted.double</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#escape-characters</string>
          </dict>
        </array>
        <key>end</key>
        <string>(\")</string>
      </dict>
      <key>escape-characters</key>
      <dict>
        <key>match</key>
        <string>\\[nrt\\\"]</string>
        <key>name</key>
        <string>constant.character.escape</string>
      </dict>
      <key>number</key>
      <dict>
        <key>name</key>
        <string>meta.number</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#integer</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#float</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#infinity</string>
          </dict>
        </array>
      </dict>
      <key>constant</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#boolean</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#undefined</string>
          </dict>
        </array>
      </dict>
      <key>boolean</key>
      <dict>
        <key>name</key>
        <string>meta.boolean</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#true</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#false</string>
          </dict>
        </array>
      </dict>
      <key>true</key>
      <dict>
        <key>match</key>
        <string>(true)</string>
        <key>name</key>
        <string>constant.language.true</string>
      </dict>
      <key>false</key>
      <dict>
        <key>match</key>
        <string>(false)</string>
        <key>name</key>
        <string>constant.language.false</string>
      </dict>
      <key>undefined</key>
      <dict>
        <key>match</key>
        <string>(undefined)</string>
        <key>name</key>
        <string>constant.language.undefined</string>
      </dict>
      <key>infinity</key>
      <dict>
        <key>match</key>
        <string>(infinity)</string>
        <key>name</key>
        <string>constant.language.infinity</string>
      </dict>
      <key>integer</key>
      <dict>
        <key>match</key>
        <string>(?:\b[0-9][0-9_]*(n)?\b(?!\.))</string>
        <key>name</key>
        <string>constant.numeric.integer</string>
      </dict>
      <key>float</key>
      <dict>
        <key>match</key>
        <string>(?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*(n)?\b)</string>
        <key>name</key>
        <string>constant.numeric.float</string>
      </dict>
    </dict>
  </dict>
</plist>